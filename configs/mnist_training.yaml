core:
  data:
    train:
      module: torch.utils.data
      class: DataLoader
      DataLoader:
        dataset:
          module: torchvision.datasets
          class: MNIST
          MNIST:
            root: '''dataset/MNIST/'''
            train: True
            download: True
            transform: transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])
        batch_size: 128
        shuffle: False

    train_eval:
      module: torch.utils.data
      class: DataLoader
      DataLoader:
        dataset:
          module: torchvision.datasets
          class: MNIST
          MNIST:
            root: '''dataset/MNIST/'''
            train: True
            download: True
            transform: transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])
        batch_size: 128
        shuffle: False

    valid:
      module: torch.utils.data
      class: DataLoader
      DataLoader:
        dataset:
          module: torchvision.datasets
          class: MNIST
          MNIST:
            root: '''dataset/MNIST/'''
            train: False
            download: True
            transform: transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])
        batch_size: 128
        shuffle: False

  loss:
    module: flame.core.loss.loss
    class: Loss
    Loss:
      loss_fn: torch.nn.NLLLoss()
      output_transform: 'lambda x: x'

  model:
    module: flame.core.model.net
    class: Net

  optim:
    module: torch.optim
    class: SGD
    SGD:
      params: core.model.parameters()
      lr: 0.01
      momentum: 0.9

  engine:
    module: flame.core.engine.engine
    class: Trainer
    Trainer:
      model: core.model
      data: core.data.train
      loss: core.loss
      optim: core.optim
      device: '''cuda'''
      max_epochs: 100

engine: core.engine

extralibs:
  torch: torch
  transforms: torchvision.transforms
