core:
  data:
    train:
      module: torch.utils.data
      class: DataLoader
      DataLoader:
        dataset:
          module: torchvision.datasets
          class: MNIST
          MNIST:
            root: '''dataset/MNIST/'''
            train: True
            download: True
            transform: transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])
        batch_size: 128
        shuffle: False

    train_eval:
      module: torch.utils.data
      class: DataLoader
      DataLoader:
        dataset:
          module: torchvision.datasets
          class: MNIST
          MNIST:
            root: '''dataset/MNIST/'''
            train: True
            download: True
            transform: transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])
        batch_size: 128
        shuffle: False

    valid:
      module: torch.utils.data
      class: DataLoader
      DataLoader:
        dataset:
          module: torchvision.datasets
          class: MNIST
          MNIST:
            root: '''dataset/MNIST/'''
            train: False
            download: True
            transform: transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])
        batch_size: 128
        shuffle: False

  loss:
    module: flame.core.loss.loss
    class: Loss
    Loss:
      loss_fn: torch.nn.NLLLoss()
      output_transform: 'lambda x: x'

  model:
    module: flame.core.model.net
    class: Net

  optim:
    module: torch.optim
    class: SGD
    SGD:
      params: core.model.parameters()
      lr: 0.01
      momentum: 0.9

  engine:
    module: flame.core.engine.engine
    class: Trainer
    Trainer:
      model: core.model
      data: core.data.train
      loss: core.loss
      optim: core.optim
      device: '''cuda'''
      max_epochs: 100

handlers:
  evaluator:
    train:
      module: flame.core.engine.engine
      class: Evaluator
      Evaluator:
        model: core.model
        data: core.data.train_eval
        device : '''cuda'''

    valid:
      module: flame.core.engine.engine
      class: Evaluator
      Evaluator:
        model: core.model
        data: core.data.valid
        device : '''cuda'''

  metrics:
    loss:
      module: ignite.metrics
      class: Loss
      Loss:
        loss_fn: torch.nn.NLLLoss()

  logging:
    tensorboard:
      train:
        module: torch.utils.tensorboard
        class: SummaryWriter
        SummaryWriter:
          log_dir: '''runs/MNIST/train'''

      valid:
        module: torch.utils.tensorboard
        class: SummaryWriter
        SummaryWriter:
          log_dir: '''runs/MNIST/valid'''

setup:
  evaluator:
    train:
      engine: core.engine
      handler: handlers.evaluator.train.run
      event: Events.EPOCH_COMPLETED

    valid:
      engine: core.engine
      handler: handlers.evaluator.valid.run
      event: Events.EPOCH_COMPLETED

  metrics:
    loss:
      - engine: core.engine
        handler: handlers.metrics.loss.attach
        event: Events.STARTED
        handler_kwargs:
          engine: handlers.evaluator.train
          name: '''loss'''

      - engine: core.engine
        handler: handlers.metrics.loss.attach
        event: Events.STARTED
        handler_kwargs:
          engine: handlers.evaluator.valid
          name: '''loss'''

  logging:
    tensorboard:
      - engine: core.engine
        handler: handlers.logging.tensorboard.train.add_scalar
        event: Events.ITERATION_COMPLETED
        handler_kwargs:
          tag: '''Training/loss'''
          scalar_value: core.engine.state.output
          global_step: core.engine.state.iteration

      - engine: handlers.evaluator.train
        handler: handlers.logging.tensorboard.train.add_scalar
        event: Events.COMPLETED
        handler_kwargs:
          tag: '''Evaluation/Loss'''
          scalar_value: handlers.evaluator.train.state.metrics['loss']
          global_step: core.engine.state.epoch

      - engine: handlers.evaluator.valid
        handler: handlers.logging.tensorboard.valid.add_scalar
        event: Events.COMPLETED
        handler_kwargs:
          tag: '''Evaluation/Loss'''
          scalar_value: handlers.evaluator.valid.state.metrics['loss']
          global_step: core.engine.state.epoch


extralibs:
  torch: torch
  transforms: torchvision.transforms
  Events:
    module: ignite.engine
    name: Events
