core:
  data:
    test:
      module: torch.utils.data
      class: DataLoader
      kwargs:
        dataset:
          module: torchvision.datasets
          class: MNIST
          kwargs:
            root: '''dataset/MNIST/'''
            train: False
            download: True
            transform: transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])
        batch_size: 128
        shuffle: False

  model:
    module: flame.core.model.net
    class: Net

  engine:
    module: flame.core.engine.engine
    class: Evaluator
    kwargs:
      model: core.model
      data: core.data.test
      device: '''cuda'''

handlers:
  metrics:
    loss:
      module: ignite.metrics
      class: Loss
      kwargs:
        loss_fn:
          module: torch.nn
          class: NLLLoss

    accuracy:
      module: ignite.metrics
      class: Accuracy

  logging:
    progress_bar:
      module: ignite.contrib.handlers
      class: ProgressBar
      kwargs:
        persist: True

setup:
  metrics:
    loss:
      engine: core.engine
      handler: handlers.metrics.loss.attach
      event: Events.STARTED
      handler_kwargs:
        engine: core.engine
        name: '''loss'''

    accuracy:
      engine: core.engine
      handler: handlers.metrics.accuracy.attach
      event: Events.STARTED
      handler_kwargs:
        engine: core.engine
        name: '''accuracy'''

  logging:
    progress_bar:
      - engine: core.engine
        handler: handlers.logging.progress_bar.attach
        event: Events.STARTED
        handler_kwargs:
          engine: core.engine

      - engine: core.engine
        handler: tqdm.write
        event: Events.COMPLETED
        handler_kwargs:
          s: '''Test result: '' + '' - ''.join([f''{name}: {value:.4f}'' for name, value in core.engine.state.metrics.items()])'

extralibs:
  transforms: torchvision.transforms
  Events:
    module: ignite.engine
    name: Events
  tqdm:
    module: tqdm
    name: tqdm
